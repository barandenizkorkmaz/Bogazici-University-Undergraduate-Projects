%{
    Question 3
%}

%{ 
   Clears old variables from console and workspace to avoid some
   possible errors.
%}
clear; clc;
clc; clear;

hfile = 'mike.wav'; % This is a string, corresponding to the filename

% Clears the variables of y and Fs to avoid possible errors.
clear y Fs

% The audioread function reads the audio file and returns the signal and the
% frequency of the signal.
[y, Fs] = audioread(hfile);

% The default value of the K is determined as 100 ms (0.1 s).
K=0.1;

% The combined mike.wav and the delayed version of it.
yCombined=y+delayseq(y,Fs*K);

%OUTPUT1
%N and K are constants, a is changed from 0 to 1. Since N-Tap Filter will be
%implemented for 50 times, the range between two alpha values of 0.02
%is appropriate. The constant value of N is determined as 50 and the constant value of K will
%be taken as 100 ms.
N=50;
alpha=(0:0.02:1);

% Since the filter will be operated for each alpha value, the length of the
% array that holds the corresponding snr values is equal to the length of
% the alpha array.
sizeOfAlphaArray=length(alpha);
snrArray1=zeros(sizeOfAlphaArray,1);

% For each alpha values, nTapFilter operates and the calculated snr value
% of the original and the recovered signal is added into the corresponding
% index at the snr array.
for i=1:sizeOfAlphaArray
    filterResult1=nTapFilter(yCombined,Fs,K,N,alpha(i));
    snrArray1(i)=calculateSNR(y,filterResult1);
end

% Since we have the snr values for the corresponding alpha values, we are
% ready to plot.
figure('Name','Output 1')
plot(alpha,snrArray1);
title('alpha=0:0.02:1 K=100ms N=50');

% Plays the original sound.
sound(y, Fs);                                   % Play the sound & wait until it finishes
duration = numel(y) / Fs;                       % Calculate the duration
pause(duration + 2)                             % Wait that much + 2 seconds

% Plays the last signal that is created in the loop (for alpha=1) in order
% to be able to compare the recovered sound to the original sound.
sound(filterResult1,Fs);
pause(duration+2);

%OUTPUT 2
%Alpha and K are constants, N is changed from 1 to 50. The alpha value is
%taken as 0.2 and the K value is taken as 100 ms.
alphaValue2=0.2;
snrArray2=zeros(50,1);
%Since N is changed from 1 to 50, the following line creates the array of N
%values.
NArray=1:50;

%We'll be moving one by one for each element of the NArray and carry out
%the necessary operations in the following for loop. In the loop, first, we
%get the filtered signal and then the signal generated by the n-tap filter
%and the original signal will be compared in the calculate SNR method.
for N=1:50
    filterResult2=nTapFilter(yCombined,Fs,K,N,alphaValue2);
    snrArray2(N)=calculateSNR(y,filterResult2);
end

% Since we have the snr values for the corresponding N values, we are
% ready to plot.
figure('Name','Output 2')
plot(NArray,snrArray2);
title('alpha=0.2 K=100ms N=1:50');

% Plays the last signal that is created in the loop (for N=50) in order
% to be able to compare the recovered sound to the original sound.
sound(filterResult2, Fs);
pause(duration + 2);

%OUTPUT 3
%Alpha and N are constants, K is changed between 100,200,300,400 ms. The
%constant alpha value is taken as 0.2, and the constant N value is 50.
alphaValue3=0.2;
snrArray3=zeros(4,1);
N=50;
KArray=[0.1 0.2 0.3 0.4];

%For each K values, the delayseq method creates the delayed version of the
%original signal, then the combined version will be operated in the filter
%with the corresponding K value. Finally the SNR value for the original
%signal and the recovered signal will be calculated.
for i=1:length(KArray)
    delayedSignal3=delayseq(y,Fs*KArray(i));
    yCombinedCase3=delayedSignal3+y;
    filterResult3=nTapFilter(yCombinedCase3,Fs,KArray(i),N,alphaValue3);
    snrArray3(i)=calculateSNR(y,filterResult3);
end

% Since we have the snr values for the corresponding K values, we are
% ready to plot.
figure('Name','Output 3');
plot(KArray,snrArray3);
title('alpha=0.2 K=[100,200,300,400] N=50');

% Plays the last signal that is created in the loop (for K=400 ms) in order
% to be able to compare the recovered sound to the original sound.
sound(filterResult3, Fs);
pause(duration + 2)

%N-Tap Filter will be implemented by the following method. The method
%simply adds the original signal with each delayed version of it with
%a multiplication of alpha according to the given index value (i). Then
%finally returns the filteredSignal.
function filteredSignal=nTapFilter(y,Fs,K,N,alpha)
    newSignal=y;
    for i=1:N
        delayedY=delayseq(y,Fs*K);
        newSignal=newSignal + (alpha*(-1))^i * delayedY;
    end
    filteredSignal=newSignal;
end

%calculateSNR function simply returns the snr value of the original audio
%and the recovered audio.
function snrValue=calculateSNR(originalAudio,recoveredAudio)
    snrValue=10*log10(sum(originalAudio.^2) ./ sum((recoveredAudio-originalAudio).^2));
end